//CoinDetect

import numpy as np
import cv2 as cv

img = cv.imread('/home/pi/Downloads/Face recgonation/download.jpeg', 0)
img = cv.medianBlur(img, 5)
img = cv.resize(img,(900,500))
cimg = cv.cvtColor(img, cv.COLOR_GRAY2BGR)
circles = cv.HoughCircles(img, cv.HOUGH_GRADIENT, 1, 20, param1=60, param2=100, minRadius=30, maxRadius=130)
circles = np.uint16(np.around(circles))
for i in circles[0, :]:
    cv.circle(cimg, (i[0], i[1]), i[2], (0, 255, 0), 2)
    cv.circle(cimg, (i[0], i[1]), 2, (0, 0, 255), 3)
cv.imshow('detected circles', cimg)
cv.waitKey(0)
cv.destroyAllWindows()

//FaceDetect

import cv2
face_cascade = cv2.CascadeClassifier(’haarcascade_frontalface_default.xml’)

def detectFaces():
    faces = []
    stream = io.BytesIO()
    camera.resolution = (320, 240)
    camera.capture(stream, format='jpeg')

    #Convert the picture into a numpy array
    buff = numpy.frombuffer(stream.getvalue(), dtype=numpy.uint8)
    #Now creates an OpenCV image
    image = cv2.imdecode(buff, 1)
    gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)
    #Look for faces in the image using the loaded cascade file
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)
    print ("Found "+str(len(faces))+" face(s)")
       #Draw a rectangle around every found face
    for (x,y,w,h) in faces:
           cv2.rectangle(image,(x,y),(x+w,y+h),(255,255,0),2)

    #Save the result image
    cv2.imwrite('result.jpg',image)
    return len(faces)
